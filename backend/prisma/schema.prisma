generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                  String              @id @default(cuid())
  clerkId             String              @unique
  email               String              @unique
  company             Company?
  linkedinToken       String?             // Deprecated - use PlatformConnection
  platformConnections PlatformConnection[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

model Company {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  user                   User     @relation(fields: [userId], references: [id])
  name                   String
  brandVoiceData         Json     // Stores all brand voice analysis
  contentPillars         String   // JSON string for SQLite compatibility
  postingSchedule        Json     // Default posting times  
  supportedPlatforms     String   @default("[]") // JSON array of platform types
  platformConfigurations Json? // Platform-specific settings
  webhookToken           String?  @unique // Secret token for Read.ai webhook authentication
  webhookActive          Boolean  @default(true) // Allow enabling/disabling webhook processing
  meetings               Meeting[]
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model Meeting {
  id           String        @id @default(cuid())
  companyId    String?
  company      Company?      @relation(fields: [companyId], references: [id])
  readaiId     String        @unique
  title        String?
  transcript   String
  summary      String?
  actionItems  Json?
  contentHooks ContentHook[]
  processedAt  DateTime?
  createdAt    DateTime      @default(now())
}

model ContentHook {
  id          String        @id @default(cuid())
  meetingId   String
  meeting     Meeting       @relation(fields: [meetingId], references: [id])
  hook        String
  pillar      String?       // Which content pillar this belongs to
  posts       ContentPost[]
  createdAt   DateTime      @default(now())
}

model ContentPost {
  id             String      @id @default(cuid())
  hookId         String
  hook           ContentHook @relation(fields: [hookId], references: [id])
  content        String
  imageUrl       String?
  imagePrompt    String?
  status         PostStatus  @default(PENDING)
  scheduledFor   DateTime?
  publishedAt    DateTime?
  platformContent Json?      // Store platform-specific data (LinkedIn post IDs, etc.)
  editHistory    Json?       // Track content edits
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

enum PostStatus {
  PENDING
  APPROVED
  SCHEDULED
  PUBLISHED
  REJECTED
}

model PlatformConnection {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  platform          String   // 'linkedin', 'twitter', etc.
  platformUserId    String?  // User ID on the platform
  encryptedToken    String   // Encrypted access token
  refreshToken      String?  // Encrypted refresh token
  expiresAt         DateTime?
  connectionMetadata Json?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([userId, platform])
}